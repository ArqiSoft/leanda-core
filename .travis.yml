language: minimal

services:
  - docker

branches:
  only:
    - master

os:
  - linux

env:
  global:
    - DATE=`TZ=America/New_York date "+%Y-%m-%d-%H%M"`
    - DATE_TM=`TZ=America/New_York date "+%Y-%m-%d %H:%M"`
    # - DOCKER_IMAGE="leanda/ui"
    - DOCKER_CACHE_FILE=/home/travis/docker/docker-cache.tar

before_install:
  - ls /home/travis/docker/
  - if [ -f ${DOCKER_CACHE_FILE} ]; then docker load -i ${DOCKER_CACHE_FILE}; fi
  - docker image ls

cache:
  directories:
    - /home/travis/docker/

# script:
#   - docker build -t leanda/core-persistence:latest -f Sds.Osdr.Persistence/Dockerfile .
#   - docker build -t leanda/core-frontend:latest -f Sds.Osdr.Domain.FrontEnd/Dockerfile .
#   - docker build -t leanda/core-backend:latest -f Sds.Osdr.Domain.BackEnd/Dockerfile .
#   - docker build -t leanda/core-sagahost:latest -f Sds.Osdr.Domain.SagaHost/Dockerfile .
#   - docker build -t leanda/core-web-api:latest -f Sds.Osdr.WebApi/Dockerfile .
#   - docker build -t leanda/integration:latest -f Sds.Osdr.IntegrationTests/Dockerfile .
#   - docker build -t leanda/webapi-integration:latest -f Sds.Osdr.WebApi.IntegrationTests/Dockerfile .
#   - docker image ls

jobs:
  include:
    - stage: Docker warm up
      name: Pull required docker images
      script: 
        # - docker pull microsoft/dotnet:2.1-sdk
        - docker pull leanda/core-persistence
        - docker pull leanda/core-frontend
        - docker pull leanda/core-backend
        - docker pull leanda/core-sagahost
        - docker pull leanda/core-web-api
        # - docker pull leanda/integration
        # - docker pull leanda/webapi-integration
        # - if [[ ${TRAVIS_BRANCH} == "master" ]] && [[ ${TRAVIS_PULL_REQUEST} == "false" ]]; then mkdir -p $(dirname ${DOCKER_CACHE_FILE}) ; docker save $(docker history -q microsoft/dotnet:2.1-sdk | docker history -q leanda/core-persistence | docker history -q leanda/core-frontend | docker history -q leanda/core-backend | docker history -q leanda/core-sagahost | docker history -q leanda/core-web-api | grep -v '<missing>') | gzip > ${DOCKER_CACHE_FILE}; fi
        - if [[ ${TRAVIS_BRANCH} == "master" ]] && [[ ${TRAVIS_PULL_REQUEST} == "false" ]]; then mkdir -p $(dirname ${DOCKER_CACHE_FILE}); docker save -o ${DOCKER_CACHE_FILE} microsoft/dotnet:2.1-sdk leanda/core-persistence:latest leanda/core-frontend:latest leanda/core-backend:latest leanda/core-sagahost:latest leanda/core-web-api:latest; fi
        - ls -l
    - stage: Build docker images
      name: Build Persistence service
      script: docker build -t leanda/core-persistence:latest -f Sds.Osdr.Persistence/Dockerfile .
    - script: docker build -t leanda/core-frontend:latest -f Sds.Osdr.Domain.FrontEnd/Dockerfile .
      name: Build Front End service
    - script: docker build -t leanda/core-backend:latest -f Sds.Osdr.Domain.BackEnd/Dockerfile .
      name: Build Back End service
    - stage: Check docker images
      script:
        # - if [ -f ${DOCKER_CACHE_FILE} ]; then gunzip -c ${DOCKER_CACHE_FILE} | docker load; fi
        - docker images

# jobs:
#   include:
#     - stage: build docker images
#       name: build Persistence service
#       script: docker build -t leanda/core-persistence:latest -f Sds.Osdr.Persistence/Dockerfile .
#     - script: docker build -t leanda/core-frontend:latest -f Sds.Osdr.Domain.FrontEnd/Dockerfile .
#       name: build Front End service
#     - script: docker build -t leanda/core-backend:latest -f Sds.Osdr.Domain.BackEnd/Dockerfile .
#       name: build Back End service
#     - stage: check docker images
#       script: docker images

# env:
#   global:
#     - DATE=`TZ=America/New_York date "+%Y-%m-%d-%H%M"`
#     - DATE_TM=`TZ=America/New_York date "+%Y-%m-%d %H:%M"`
#     - DOCKER_IMAGE="leanda/ui"

# before_script:
#   - echo "{\"buildInfo\":{\"buildId\":\""$TRAVIS_BUILD_NUMBER"\",\"buildDate\":\""$DATE_TM"\",\"environment\":\"DEV\"}}" > src/jenkinsBuildData.json

# script:
#   - docker build --build-arg APP_ENV=deploy -t $DOCKER_IMAGE:$DATE -t $DOCKER_IMAGE:latest .

# after_success:
#   - docker login -u="$DOCKER_USERNAME" -p="$DOCKER_PASSWORD"
#   - docker push $DOCKER_IMAGE # Pushes both date and latest